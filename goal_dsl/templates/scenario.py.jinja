{% import 'goal_macros.jinja' as goal_macros %}
{% import 'broker_macros.jinja' as broker_macros %}
#!/usr/bin/env python3

import os
from statistics import stdev as std, mean as mean, variance as var

from goalee import Scenario, RedisBroker, MQTTBroker, AMQPBroker
from goalee.entity import Entity
from goalee.types import Point, Orientation
from goalee.area_goals import (
    RectangleAreaGoal,
    CircularAreaGoal,
    MovingAreaGoal,
    AreaGoalTag
)
from goalee.complex_goal import (
    ComplexGoal,
    ComplexGoalAlgorithm
)
from goalee.entity_goals import (
    EntityStateChange,
    EntityStateCondition
)
from goalee.pose_goals import (
    PoseGoal,
    PositionGoal,
    OrientationGoal
)

entities_list = []

{% for entity in entities %}
{{ entity.name }} = Entity(
    name='{{ entity.name }}',
    etype='{{ entity.etype }}',
    topic='{{ entity.topic }}',
    attributes={{ entity.attr_list }},
    {% if entity.source.ref.__class__.__name__ == 'AMQPBroker' %}
    source={{ broker_macros.amqp_broker(entity.source.ref) }},
    {% elif entity.source.ref.__class__.__name__ == 'RedisBroker' %}
    source={{ broker_macros.redis_broker(entity.source.ref) }},
    {% elif entity.source.ref.__class__.__name__ == 'MQTTBroker' %}
    source={{ broker_macros.mqtt_broker(entity.source.ref) }},
    {% endif %}
)
{% for attr in entity.attributes %}
{% if attr.buffer not in (None, 0) %}
{{ entity.name }}.init_attr_buffer("{{ attr.name }}", {{ attr.buffer }})
{% endif %}
{% endfor %}
entities_list.append({{ entity.name }})
{% endfor %}


if __name__ == '__main__':
    {% if rtmonitor and rtmonitor.broker.__class__.__name__ == 'AMQPBroker' %}
    broker = {{ broker_macros.amqp_broker(rtmonitor.broker) }}
    {% elif rtmonitor and rtmonitor.broker.__class__.__name__ == 'RedisBroker' %}
    broker = {{ broker_macros.redis_broker(rtmonitor.broker) }}
    {% elif rtmonitor and rtmonitor.broker.__class__.__name__ == 'MQTTBroker' %}
    broker = {{ broker_macros.mqtt_broker(rtmonitor.broker) }}
    {% else %}
    broker = None
    {% endif %}

    scenario = Scenario(
        name='{{ scenario.name }}',
        broker=broker,
        score_weights={{ scenario.scoreWeights }}
    )

    {% for goal in goals %}
    {% if goal.__class__.__name__ == 'EntityStateConditionGoal' %}
    {{ goal_macros.entity_state_condition_goal(goal, entity_names) }}
    {% elif goal.__class__.__name__ == 'EntityStateChangeGoal' %}
    {{ goal_macros.entity_state_change_goal(goal) }}
    {% elif goal.__class__.__name__ == 'RectangleAreaGoal' %}
    {{ goal_macros.rectangle_area_goal(goal, entity_names) }}
    {% elif goal.__class__.__name__ == 'CircularAreaGoal' %}
    {{ goal_macros.circular_area_goal(goal, entity_names) }}
    {% elif goal.__class__.__name__ == 'MovingAreaGoal' %}
    {{ goal_macros.moving_area_goal(goal, entity_names) }}
    {% elif goal.__class__.__name__ == 'PositionGoal' %}
    {{ goal_macros.position_goal(goal) }}
    {% elif goal.__class__.__name__ == 'OrientationGoal' %}
    {{ goal_macros.orientation_goal(goal) }}
    {% elif goal.__class__.__name__ == 'WaypointTrajectoryGoal' %}
    {{ goal_macros.waipoint_trajectory_goal(goal) }}
    {% elif goal.__class__.__name__ == 'ComplexGoal' %}
    cg = ComplexGoal(
        algorithm=ComplexGoalAlgorithm.{{ goal.algorithm }},
        max_duration={{ goal.max_duration }},
        min_duration={{ goal.min_duration }},
    )
    {% for goal in goal.goals %}
    {% if goal.__class__.__name__ == 'EntityStateConditionGoal' %}
    {{ goal_macros.entity_state_condition_goal(goal, entity_names) }}
    {% elif goal.__class__.__name__ == 'EntityStateChangeGoal' %}
    {{ goal_macros.entity_state_change_goal(goal) }}
    {% elif goal.__class__.__name__ == 'RectangleAreaGoal' %}
    {{ goal_macros.rectangle_area_goal(goal, entity_names) }}
    {% elif goal.__class__.__name__ == 'CircularAreaGoal' %}
    {{ goal_macros.circular_area_goal(goal, entity_names) }}
    {% elif goal.__class__.__name__ == 'MovingAreaGoal' %}
    {{ goal_macros.moving_area_goal(goal, entity_names) }}
    {% elif goal.__class__.__name__ == 'PositionGoal' %}
    {{ goal_macros.position_goal(goal) }}
    {% elif goal.__class__.__name__ == 'OrientationGoal' %}
    {{ goal_macros.orientation_goal(goal) }}
    {% elif goal.__class__.__name__ == 'WaypointTrajectoryGoal' %}
    {{ goal_macros.waipoint_trajectory_goal(goal) }}
    cg.add_goal(cg)
    {% endfor %}
    ## More Goals to Generate here
    {% endif %}
    scenario.add_goal(g)
    {% endfor %}

    {% if rtmonitor %}
    try:
        etopic = '{{ rtmonitor.eTopic }}'.format(**{k: os.environ.get(k, "") for k in os.environ}).replace('..', '.')
        ltopic = '{{ rtmonitor.lTopic }}'.format(**{k: os.environ.get(k, "") for k in os.environ}).replace('..', '.')
    except KeyError as e:
        print(f"Error occurred while retrieving environment variables: {e}")
        exit(1)
    scenario.init_rtmonitor(etopic, ltopic)
    {% endif %}

    {% if scenario.concurrent == True %}
    scenario.run_concurrent()
    {% else %}
    scenario.run_seq()
    {% endif %}

