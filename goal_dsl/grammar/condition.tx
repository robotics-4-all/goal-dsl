import entity
import types
import utils

// === Conditions ===

TermPool:
    'TermPool' name=ID
    (
        conditions*=Condition
    )#
    'end'
;

Condition:
    r1=ConditionGroup (operator=LogicalOperator r2=ConditionGroup)*
;

ConditionGroup:
    '(' r=Condition ')'
    | PrimitiveCondition
    | MathExpression
;

PrimitiveCondition:
    BoolCondition       |
    TimeCondition       |
    NumericCondition    |
    StringCondition     |
    ListCondition       |
    DictCondition
;

MathExpression:
    left=MathTerm (operator=PlusOrMinus right=MathTerm)*
;

MathTerm:
    left=MathFactor (operator=MulOrDiv right=MathFactor)*
;

MathFactor:
    (sign=PlusOrMinus)?
    (
        op=MathOperand | '(' op=MathExpression ')'
    )
;

MathOperand:
    (
    op=NUMBER                   |
    op=BuiltinNumericFunctions  |
    op=AttributeRef
    )
;

AttributeRef:
    DictAttributeRef    |
    ListAttributeRef    |
    SimpleAttributeRef
;

SimpleAttributeRef:
    attribute=[Attribute:FQN|+m:entities.attributes]
;

DictAttributeRef:
    attribute=[Attribute:FQN|+pm:entities.attributes] (('[' key=STRING ']')*)?
;

ListAttributeRef:
    attribute=[Attribute:FQN|+pm:entities.attributes] (('[' index=INT ']')*)?
;

PlusOrMinus: '+' | '-';
MulOrDiv: '*' | '/' ;

NumericCondition:
    (operand1=MathExpression
     operator=NumericOperator
     operand2=MathExpression)
;

StringCondition:
    (operand1=AttributeRef
     operator=StringOperator
     (operand2=STRING | operand2=AttributeRef))
;

BoolCondition:
    (operand1=AttributeRef
     operator=BooleanOperator
     (operand2=BOOL | operand2=AttributeRef))
;

ListCondition:
    (operand1=AttributeRef
     operator=ListOperator
     (operand2=List | operand2=AttributeRef))
;

DictCondition:
    (operand1=AttributeRef
     operator=DictOperator
     (operand2=Dict | operand2=AttributeRef))
;

TimeCondition:
    (operand1=AttributeRef
     operator=TimeOperator
     operand2=AttributeRef)
;

StdAttr:
    'std' '(' attribute=MathOperand ',' size=INT ')'
;

VarAttr:
    'var' '(' attribute=MathOperand ',' size=INT ')'
;

MeanAttr:
    'mean' '(' attribute=MathOperand  ',' size=INT ')'
;

MinAttr:
    'min' '(' attribute=MathOperand  ',' size=INT ')'
;

MaxAttr:
    'max' '(' attribute=MathOperand  ',' size=INT ')'
;

InRangeAttr:
    'inrange' '(' attribute=MathOperand  ',' min=NUMBER ',' max=NUMBER ')'
;


BuiltinNumericFunctions:
    StdAttr         |
    VarAttr         |
    MeanAttr        |
    MinAttr         |
    MaxAttr         |
    InRangeAttr
;

// Operators

// SharedOperator: '==' | '!=' | 'is' | 'is not';

StringOperator: '~' | '!~' | '==' | '!=' | 'is not' | 'is' | 'has' | 'in' | 'not in';

NumericOperator: '>=' | '>' | '<=' | '<' | '==' | '!=' | 'is not' | 'is';

LogicalOperator: 'and' | 'or' | 'not' | 'xor' | 'nor' | 'xnor' | 'nand';

BooleanOperator: '==' | '!=' | 'is not' | 'is';

ListOperator: '==' | '!=' | 'is' | 'is not' | 'in' | 'not in';

DictOperator: '==' | '!=' | 'is' | 'is not';

TimeOperator: '>=' | '>' | '<=' | '<' | '==' | '!=' | 'is not' | 'is';
