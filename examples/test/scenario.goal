Metadata
    name: tUJaj
    version: "0.1.0"
    author: "AUTHOR_NAME_HERE"
    email: "CONTACT_EMAIL_HERE"
    description: "BRIEF_DESCRIPTION"
end

Broker<MQTT> LocsysMQTT
    host: 'locsys.issel.ee.auth.gr'
    port: 8883
    ssl: true
    auth:
        username: '*****'
        password: '*****'
end

Broker<MQTT> LocalMQTT
    host: 'localhost'
    port: 1883
    auth:
        username: ''
        password: ''
end

Broker<Redis> LocalRedis
    host: 'localhost'
    port: 6379
    auth:
        username: ''
        password: ''
end

RTMonitor
    broker: LocalRedis
    eventTopic: "goaldsl.{U_ID}.event"
    logsTopic: "goaldsl.{U_ID}.log"
end

Entity ef_light_65_state
    type: sensor
    uri: "streamsim.{UID}.world.world.actuator.visual.leds.ef_light_65.state"
    source: LocalRedis
    freq: -1
    attributes:
        - state: dict
end

Entity ef_light_66_state
    type: sensor
    uri: "streamsim.{UID}.world.world.actuator.visual.leds.ef_light_66.state"
    source: LocalRedis
    freq: -1
    attributes:
        - state: dict
end

Entity ef_light_67_state
    type: sensor
    uri: "streamsim.{UID}.world.world.actuator.visual.leds.ef_light_67.state"
    source: LocalRedis
    freq: -1
    attributes:
        - state: dict
end

Entity gn_human_54_pose
    type: sensor
    uri: "streamsim.{UID}.actor.human.gn_human_54.pose"
    source: LocalRedis
    freq: -1
    attributes:
        - position: dict
        - orientation: dict
end

Entity gn_human_54_properties
    type: sensor
    uri: "streamsim.{UID}.actor.human.gn_human_54.properties"
    source: LocalRedis
    freq: -1
    attributes:
        - move: bool
        - sound: bool
        - lang: str
        - range: float
        - speech: str
        - emotion: str
        - gender: str
        - age: float
end

Entity gn_human_59_pose
    type: sensor
    uri: "streamsim.{UID}.actor.human.gn_human_59.pose"
    source: LocalRedis
    freq: -1
    attributes:
        - position: dict
        - orientation: dict
end

Entity gn_human_59_properties
    type: sensor
    uri: "streamsim.{UID}.actor.human.gn_human_59.properties"
    source: LocalRedis
    freq: -1
    attributes:
        - move: bool
        - sound: bool
        - lang: str
        - range: float
        - speech: str
        - emotion: str
        - gender: str
        - age: float
end

Entity gn_human_62_pose
    type: sensor
    uri: "streamsim.{UID}.actor.human.gn_human_62.pose"
    source: LocalRedis
    freq: -1
    attributes:
        - position: dict
        - orientation: dict
end

Entity gn_human_62_properties
    type: sensor
    uri: "streamsim.{UID}.actor.human.gn_human_62.properties"
    source: LocalRedis
    freq: -1
    attributes:
        - move: bool
        - sound: bool
        - lang: str
        - range: float
        - speech: str
        - emotion: str
        - gender: str
        - age: float
end

Entity gerard_pose
    type: sensor
    uri: "streamsim.{UID}.gerard.pose"
    source: LocalRedis
    freq: -1.0
    attributes:
        - position: dict
        - orientation: dict
end

Entity gerard_crash
    type: sensor
    uri: "streamsim.{UID}.gerard.crash"
    source: LocalRedis
    freq: -1.0
    attributes:
        - position: dict
        - orientation: dict
end

Entity gerard_camera_detect
    type: sensor
    uri: "streamsim.{UID}.gerard.sensor.visual.camera.gerard_camera.detection"
    source: LocalRedis
    freq: -1.0
    attributes:
        - detection: dict
end

Entity gn_robot_57_pose
    type: sensor
    uri: "streamsim.{UID}.gn_robot_57.pose"
    source: LocalRedis
    freq: -1.0
    attributes:
        - position: dict
        - orientation: dict
end

Entity gn_robot_57_crash
    type: sensor
    uri: "streamsim.{UID}.gn_robot_57.crash"
    source: LocalRedis
    freq: -1.0
    attributes:
        - position: dict
        - orientation: dict
end

Entity gn_robot_58_pose
    type: sensor
    uri: "streamsim.{UID}.gn_robot_58.pose"
    source: LocalRedis
    freq: -1.0
    attributes:
        - position: dict
        - orientation: dict
end

Entity gn_robot_58_crash
    type: sensor
    uri: "streamsim.{UID}.gn_robot_58.crash"
    source: LocalRedis
    freq: -1.0
    attributes:
        - position: dict
        - orientation: dict
end

Entity ef_light_65_set
    type: actuator
    uri: "streamsim.{UID}.world.world.actuator.visual.leds.ef_light_65.set"
    source: LocalRedis
    attributes:
        - luminosity: float
        - r: float
        - g: float
        - b: float
end

Entity ef_light_66_set
    type: actuator
    uri: "streamsim.{UID}.world.world.actuator.visual.leds.ef_light_66.set"
    source: LocalRedis
    attributes:
        - luminosity: float
        - r: float
        - g: float
        - b: float
end

Entity ef_light_67_set
    type: actuator
    uri: "streamsim.{UID}.world.world.actuator.visual.leds.ef_light_67.set"
    source: LocalRedis
    attributes:
        - luminosity: float
        - r: float
        - g: float
        - b: float
end

Entity gerard_motion_set
    type: actuator
    uri: "streamsim.{UID}.gerard.actuator.motion.twist.gerard_skid_steer.set"
    source: LocalRedis
    attributes:
        - linear: float
        - angular: float
end

Entity gn_robot_57_motion_set
    type: actuator
    uri: "streamsim.{UID}.gn_robot_57.actuator.motion.twist.gn_robot_57_skid_steer.set"
    source: LocalRedis
    attributes:
        - linear: float
        - angular: float
end

Entity gn_robot_58_motion_set
    type: actuator
    uri: "streamsim.{UID}.gn_robot_58.actuator.motion.twist.gn_robot_58_skid_steer.set"
    source: LocalRedis
    attributes:
        - linear: float
        - angular: float
end

// ------------------- GOALS --------------------------------------
// ----------------------------------------------------------------

Goal<EntityPyCondition> Traffic_Lights_A_Red
    condition:
        "ef_light_65_state.state['r'] == 255 and ef_light_65_state.state['luminosity'] > 10"
    timeConstraints:
        - FROM_GOAL_START(<1)
end

Goal<CircularArea> Gerard_Close_to_Traffic_Lights_A
    entities:
      - gerard_pose
    center: Point3D(43.43, 19.87, 0)
    radius: 1
    tag: ENTER
end

Goal<Complex> Pass_A_While_Red
    goals:
        - Gerard_Close_to_Traffic_Lights_A
        - Traffic_Lights_A_Red
    strategy: ALL_ACCOMPLISHED_ORDERED
end

Goal<EntityPyCondition> Traffic_Lights_B_Red
    condition:
        "ef_light_67_state.state['r'] == 255 and ef_light_67_state.state['luminosity'] > 10"
    timeConstraints:
        - FROM_GOAL_START(<1)
end

Goal<CircularArea> Gerard_Close_to_Traffic_Lights_B
    entities:
      - gerard_pose
    center: Point3D(56.67, 33.24, 0)
    radius: 1
    tag: ENTER
end

Goal<Complex> Pass_B_While_Red
    goals:
        - Gerard_Close_to_Traffic_Lights_B
        - Traffic_Lights_B_Red
    strategy: ALL_ACCOMPLISHED_ORDERED
end

Goal<EntityPyCondition> Traffic_Lights_C_Red
    condition:
        "ef_light_66_state.state['r'] == 255 and ef_light_66_state.state['luminosity'] > 10"
    timeConstraints:
        - FROM_GOAL_START(<1)
end

Goal<CircularArea> Gerard_Close_to_Traffic_Lights_C
    entities:
      - gerard_pose
    center: Point3D(69.94, 46.99, 0)
    radius: 1
    tag: ENTER
end

Goal<Complex> Pass_C_While_Red
    goals:
        - Gerard_Close_to_Traffic_Lights_C
        - Traffic_Lights_C_Red
    strategy: ALL_ACCOMPLISHED_ORDERED
end

Goal<EntityStateChange> Gerard_Crash
    entity: gerard_crash
end

/* Goal<Position> Reach_Mall
    entity: gerard_pose
    position: Point3D(70.0, 58.0, 0)
    maxDeviation: 2
end */

Goal<CircularArea> Final_Location_Reach_Mall
    entities:
      - gerard_pose
    center: Point3D(70.0, 58.0, 0)
    radius: 3
    tag: ENTER
    timeConstraints:
        - FOR_TIME(1)
end

Goal<CircularArea> Checkpoint_A_1
    entities:
      - gerard_pose
    center: Point3D(56.67, 20.0, 0)
    radius: 2
    tag: ENTER
end

Goal<CircularArea> Checkpoint_A_2
    entities:
      - gerard_pose
    center: Point3D(43.33, 33.33, 0)
    radius: 2
    tag: ENTER
end

Goal<Complex> Checkpoint_A
    goals:
        - Checkpoint_A_1
        - Checkpoint_A_2
    strategy: AT_LEAST_ONE_ACCOMPLISHED
end

Goal<CircularArea> Checkpoint_B_1
    entities:
      - gerard_pose
    center: Point3D(56.67, 46.67, 0)
    radius: 2
    tag: ENTER
end

Goal<CircularArea> Checkpoint_B_2
    entities:
      - gerard_pose
    center: Point3D(70.0, 33.33, 0)
    radius: 2
    tag: ENTER
end

Goal<Complex> Checkpoint_B
    goals:
        - Checkpoint_B_1
        - Checkpoint_B_2
    strategy: AT_LEAST_ONE_ACCOMPLISHED
end

// ----------------------------------------------------------------

Scenario W3_T4
    goals:
        - Checkpoint_A -> 0.2
        - Checkpoint_B -> 0.2
        - Final_Location_Reach_Mall -> 0.6
    fatals:
        - Pass_A_While_Red
        - Pass_B_While_Red
        - Pass_C_While_Red
        - Gerard_Crash
    concurrent: True
end
